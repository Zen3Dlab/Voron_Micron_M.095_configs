[gcode_macro _User_Variables]
variable_dock_x: 1
variable_dock_y: 189
variable_dock_z: -2.5
variable_probe_lift: 15
variable_dock_spd: 50
variable_travel_speed: 150
variable_move_accel: 1000   
variable_bypass_probe_docking: False
gcode:

[gcode_macro _Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
gcode:

##########################
# Attach probe and lock it
#[gcode_macro Attach_Probe_Lock]
#description: Attaches Klicky Probe, can only be docked after unlocking
#gcode:
#    Attach_Probe
#    _Probe_Lock

[gcode_macro ATTACH_PROBE]
gcode: 

  {% set goback  = params.BACK|default(0) %}
  {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
  {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}


  {% if not 'xyz' in printer.toolhead.homed_axes %}
    { action_raise_error("Must Home First!") }

  # If probe not attached and locked
  {% elif not probe_attached and not probe_lock %}

     _entry_point function=Attach_Probe

      {% set dock_x = printer["gcode_macro _User_Variables"].dock_x %}
      {% set dock_y = printer["gcode_macro _User_Variables"].dock_y %}
      {% set dock_z = printer["gcode_macro _User_Variables"].dock_z %}
      {% set dock_spd = printer["gcode_macro _User_Variables"].dock_spd %}
      {% set speed = printer["gcode_macro _User_Variables"].travel_speed %}
      {% set probe_lift = printer["gcode_macro _User_Variables"].probe_lift %}
      
      G90

      G1 Z{probe_lift}
      G1 X{dock_x + 25} Y{dock_y}  F{speed * 60}
      G1 X{dock_x} Y{dock_y} F{dock_spd * 60}
      G1 Z{dock_z}
     
      G4 P100

      G1 X{dock_x + 25} Y{dock_y}  F{dock_spd * 60}
      G1 Y{dock_y-5}  Z{probe_lift} F{dock_spd * 60}

      _CheckProbe action=attach

     _exit_point function=Attach_Probe move={goback}

 {% endif %}

 
########################
# Dock probe and lock it
#[gcode_macro Dock_Probe_Unlock]
#description: Docks Klicky Probe even if it was locked
#gcode:
#    _Probe_Unlock
#    Dock_Probe 

####################
# Dock Probe Routine
[gcode_macro Dock_Probe]
gcode:
    {% set goback  = params.BACK|default(0) %}
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}

    {% if probe_attached and not probe_lock %}

        {% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}
 

        {% if bypass_probe_docking != True %}

             _entry_point function=Dock_Probe
      
            {% set dock_x = printer["gcode_macro _User_Variables"].dock_x %}
            {% set dock_y = printer["gcode_macro _User_Variables"].dock_y %}
            {% set dock_z = printer["gcode_macro _User_Variables"].dock_z %}
            {% set dock_spd = printer["gcode_macro _User_Variables"].dock_spd %}
            {% set speed = printer["gcode_macro _User_Variables"].travel_speed %}
            {% set probe_lift = printer["gcode_macro _User_Variables"].probe_lift %}
          
    
            G90
      
            G1 X{dock_x + 25} Y{dock_y - 2}  F{speed * 60}
            G1 Y{dock_y} Z{dock_z} F{dock_spd * 60}
            G1 X{dock_x} F{dock_spd * 60}
      
            G4 P100
      
            G1 Z{probe_lift} 
            G1 Y{dock_y - 25} Z{probe_lift} F{dock_spd * 60}


            _CheckProbe action=dock
            
            _exit_point function=Dock_Probe move={goback}
            
         {% endif %}

    {% endif %}

[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _User_Variables"].travel_speed %}

    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}


[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90
    # set a safe(sane) Acceleration
    SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:
    Query_Probe
    _SetProbeState action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

##############
# Unlock Probe
[gcode_macro _Probe_Unlock]
description: Unlocks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

############
# Lock Probe
[gcode_macro _Probe_Lock]
description: Locks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }


######################
# Start ByPass Probe
[gcode_macro _START_BYPASS_PROBE_DOCKING]
gcode:
    SET_GCODE_VARIABLE MACRO=_User_Variables VARIABLE=bypass_probe_docking VALUE={ True }

##################
# End ByPass Probe
[gcode_macro _END_BYPASS_PROBE_DOCKING]
gcode:
    SET_GCODE_VARIABLE MACRO=_User_Variables VARIABLE=bypass_probe_docking VALUE={ False }
    Dock_Probe